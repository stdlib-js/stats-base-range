{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = range( 4, x, 2, 1 );\n* // returns 6.0\n*/\nfunction range( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - strideX length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = range( 4, arraylike2object( x ), 2, 1 );\n* // returns 6.0\n*/\nfunction range( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( get( xbuf, offsetX ) ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = get( xbuf, ix );\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = get( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = range( x.length, x, 1 );\n* // returns 4.0\n*/\nfunction range( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array.\n*\n* @module @stdlib/stats-base-range\n*\n* @example\n* import range from '@stdlib/stats-base-range';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = range( x.length, x, 1 );\n* // returns 4.0\n*\n* @example\n* import range from '@stdlib/stats-base-range';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = range.ndarray( 4, x, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["range","N","x","strideX","offsetX","max","min","ix","o","v","i","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","isnan","ndarray","stride2offset","setReadOnly","main"],"mappings":";;qaA4CA,SAASA,EAAOC,EAAGC,EAAGC,EAASC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,OAAOU,IAGR,IADAH,EAAII,EAAkBV,IACfW,iBACN,OCTF,SAAgBZ,EAAGC,EAAGC,EAASC,GAC9B,IAAIU,EACAC,EACAV,EACAC,EACAC,EACAE,EACAC,EAQJ,GALAI,EAAOZ,EAAEc,KAGTD,EAAMb,EAAEe,UAAW,GAER,IAANhB,GAAuB,IAAZE,EACf,OAAKe,EAAOH,EAAKD,EAAMV,IACfO,IAED,EAKR,IADAN,EADAC,EAAMS,EAAKD,EADXP,EAAKH,GAGCM,EAAI,EAAGA,EAAIT,EAAGS,IAAM,CAGzB,GADAD,EAAIM,EAAKD,EADTP,GAAMJ,GAEDe,EAAOT,GACX,OAAOA,EAEHA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,EAEP,CACD,OAAOJ,EAAMC,CACd,CD5BSW,CAAWhB,EAAGO,EAAGL,EAASC,GAElC,GAAW,IAANH,GAAuB,IAAZE,EACf,OAAKe,EAAOhB,EAAGE,IACPO,IAED,EAKR,IADAN,EADAC,EAAMJ,EADNK,EAAKH,GAGCM,EAAI,EAAGA,EAAIT,EAAGS,IAAM,CAGzB,GADAD,EAAIP,EADJK,GAAMJ,GAEDe,EAAOT,GACX,OAAOA,EAEHA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,EAEP,CACD,OAAOJ,EAAMC,CACd,CEvCA,SAASN,EAAOC,EAAGC,EAAGC,GACrB,OAAOgB,EAASlB,EAAGC,EAAGC,EAASiB,EAAenB,EAAGE,GAClD,CCOAkB,EAAAC,EAAA,UAAAH"}